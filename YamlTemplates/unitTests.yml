#source: Donavan Brown taken from the build pipeline for VSTeams

parameters:
  os: ''
  CodeCoverage: 'false'

steps:
- task: PowerShell@2
  displayName: 'Install Pester and Az modules'
  inputs:
    targetType: 'inline'
    script: |
      Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser -AllowClobber -SkipPublisherCheck
      Install-Module -Name Az -Repository PSGallery -Force -Scope CurrentUser -AllowClobber -SkipPublisherCheck
    pwsh: true

- ${{ if eq(parameters.CodeCoverage, 'false') }}:
  - task: PowerShell@2
    displayName: 'Run Unit Tests'
    inputs:
      targetType: 'inline'
      script: |
        Invoke-Pester -Script .\.Tests -EnableExit -Strict -OutputFile test-results.xml -OutputFormat NUnitXml -passThru
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      pwsh: true

- ${{ if eq(parameters.CodeCoverage, 'true') }}:
  - task: PowerShell@2
    displayName: 'Run Unit Tests with Code Coverage'
    inputs:
      targetType: 'inline'
      script: |
        Invoke-Pester -Script .\.Tests -CodeCoverage .\src\ps_modules\CommonScripts\*.ps*1 -CodeCoverageOutputFile coverage.xml -CodeCoverageOutputFileFormat JaCoCo -EnableExit -Strict -OutputFile test-results.xml -OutputFormat NUnitXml
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      pwsh: true


  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      summaryFileLocation: '**\coverage.xml'
      pathToSources: '.\src\ps_modules\CommonScripts\'
      failIfCoverageEmpty: true

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: '**\test-results.xml'
    testRunTitle: '${{ parameters.os }} Unit Tests'
  condition: succeededOrFailed()