resources:
- repo: self


trigger:
  batch: true
  branches:
    include: [ develop ]

pool:
  vmImage: windows-latest

steps:
- task: GitVersion@5
  displayName: GitVersion
  inputs:
    runtime: 'core'

- template: YamlTemplates/unitTests.yml
  parameters:
    CodeCoverage: 'true'

- pwsh: '$(Build.SourcesDirectory)/tools/PrepareExtension.ps1 -sourcePath "./src" -outputDir "./dist" -generateChangeLog'
  displayName: 'Merge Extension Files for Build'

- pwsh: '$(Build.SourcesDirectory)/tools/SetTaskVersion.ps1 -Major $(GitVersion.Major) -Minor $(GitVersion.Minor) -Patch $(GitVersion.CommitsSinceVersionSource)'
  displayName: 'Set Tasks Version'

- task: TfxInstaller@2
  inputs:
    version: 'v0.7.x'

- task: PackageVSTSExtension@1
  displayName: 'Package Extension for every branch except master'
  inputs:
    rootFolder: src
    outputPath: '$(Build.ArtifactStagingDirectory)/package/'
    extensionVersion: '$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.CommitsSinceVersionSource)'

  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: PackageVSTSExtension@1
  displayName: 'Package Extension for refs/heads/master only'
  inputs:
    rootFolder: src
    outputPath: '$(Build.ArtifactStagingDirectory)/package/'
    extensionVersion: '$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.Patch)'

  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: AzurepolicyTasks'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/package/'

    ArtifactName: AzurepolicyTasks